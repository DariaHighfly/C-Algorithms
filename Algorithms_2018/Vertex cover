#include <iostream>
#include <algorithm>
#include <vector>
#include <set>


int main() {
    int x;
    int y;
    int N;
    int answer = 0;
    std::cin >> N;
    std::set<int> stop_set;
    std::set<int> set_of_vertex;
    std::vector<std::set<int>> adjacency_matrix(N);
    stop_set.clear();
    set_of_vertex.clear();
    for (size_t i = 0; i != N; ++i) {
        adjacency_matrix[i].clear();
        stop_set.insert(i);  // Тут будем держать вершины, которые мы еще не обработали
    }
    for (size_t i = 0; i != N; ++i) {
        std::cin >> y;
        for (size_t j = 0; j != y; ++j) {
            std::cin >> x;
            adjacency_matrix[i].insert(x);
        }
    }
    // Найдем все вершины, которые соединены с листьями,
    // их добавим в вершинное покрытие
    while (!stop_set.empty()) {
        for (size_t i = 0; i != N; ++i) {  // Проходимся по всем матрице смежности
            if (adjacency_matrix[i].size() == 0) {
                stop_set.erase(i);
            } else if (adjacency_matrix[i].size() == 1) {
                x = *adjacency_matrix[i].begin();  // Единственный элемент текущего set
                stop_set.erase(i);
                stop_set.erase(x);
                adjacency_matrix[i].clear();
                adjacency_matrix[x].clear();
                set_of_vertex.insert(x);
                for (size_t i = 0; i != N; ++i) {  // Проходимся по всем матрице смежности
                    if (adjacency_matrix[i].find(x) != adjacency_matrix[i].end()) {
                        adjacency_matrix[i].erase(x);
                    }
                }
            }
        }
        answer += set_of_vertex.size();
        set_of_vertex.clear();
    }
    std::cout << answer;
}
